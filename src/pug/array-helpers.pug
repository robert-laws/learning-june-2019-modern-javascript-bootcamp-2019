extends layouts/default.pug

block content
  div(id="array-helpers-page" class="container")
    h2 Array Helpers

    ul
      li
        a(href="#for-each") forEach
      li
        a(href="#for-of") For...Of
      li
        a(href="#map") map
      li
        a(href="#filter") filter
      li
        a(href="#find") find
      li
        a(href="#every") every
      li
        a(href="#some") some
      li
        a(href="#reduce") reduce

    hr

    h4(id="for-each") forEach

    p Loops through the array and returns a callback - which performs some action on the array item.

    div(class="code")
      code let names = ["bobby", "hal", "melvin", "jimmy", "lou", "kalvin", "vin", "donald", "sal"];
      code(class="s") 
      code allNames = [];
      code(class="s")
      code names.forEach(function(name) {
      code(class="i") name.length > 3 ? allNames.push(name) : ""
      code })

    div(id="for-each-result-one" class="example")

    div(class="code")
      code let numbers = [1, 2, 3, 4, 5, 6];
      code var sum = 0;
      code(class="s") 
      code function add(number) {
      code(class="i") sum += number;
      code }
      code(class="s")
      code number.forEach(add);

    div(id="for-each-result-two" class="example")

    hr

    h4(id="for-of") For...Of

    p Iterates through arrays of data. Useful with generators.

    div(class="code")
      code const someNumber = [4, 5, 6, 7];
      code let total = 0;
      code(class="s")
      code for (let number of someNumber) {
      code(class="i") total += number;
      code }
      
    div(id="for-of-result-one" class="example")

    hr

    h4(id="map") map

    p Loops through the array and maps the result of the callback function to the new array.

    div(class="code")
      code let numbers = [2, 4, 6, 8, 10];
      code(class="s")
      code let doubles = numbers.map(function(number) {
      code(class="i") return number * 2;
      code })

    div(id="map-result-one" class="example")

    div(class="code")
      code const cars = [
      code(class="i") { model: "Chevy", price: "CHEAP" },
      code(class="i") { model: "Camero", price: "expensive" }
      code ];
      code(class="s")
      code let prices = cars.map(function() {
      code(class="i") return car.price;
      code });

    div(id="map-result-two" class="example")

    hr

    h4(id="filter") filter

    p Loops through an array and returns an item if the condition returns truthy and does not return an item if condition returns falsy.

    div(class="code")
      code const products = [
      code(class="i") { name: "lemon", type: "fruit" },
      code(class="i") { name: "orange", type: "fruit" },
      code(class="i") { name: "celery", type: "vegetable" },
      code(class="i") { name: "apple", type: "fruit" },
      code(class="i") { name: "cucumber", type: "vegetable" }
      code ]
      code(class="s")
      code let filteredProducts = products.filter(function(product) {
      code(class="i") return product.type === 'fruit';
      code })

    div(id="filter-result-one" class="example")

    div(class="code")      
      code const newProducts = [
      code(class="i") { name: "lemon", type: "fruit", quantity: 10, price: 5 },
      code(class="i") { name: "orange", type: "fruit", quantity: 4, price: 12 },
      code(class="i") { name: "celery", type: "vegetable", quantity: 15, price: 12 },
      code(class="i") { name: "apple", type: "fruit", quantity: 5, price: 6 },
      code(class="i") { name: "cucumber", type: "vegetable", quantity: 12, price: 19 }
      code ]
      code(class="s")
      code let filteredNewProducts = newProducts.filter(function(product) {
      code(class="i") return (product.type === 'vegetable' && product.quantity > 5 && product.price < 15)
      code });

    div(id="filter-result-two" class="example")

    div(class="code")
      code const post = { id: 4, title: 'My Post' }
      code const comments = [
      code(class="i") { postId: 4, content: 'good post'},
      code(class="i") { postId: 3, content: 'interesting topic'},
      code(class="i") { postId: 4, content: 'did not like'}
      code ]
      code(class="s") 
      code function commentsForPost(post, comments) {
      code(class="i")  return comments.filter(function(comment) {
      code(class="i2") return comment.postId === post.id;
      code(class="i")  })
      code }
      code(class="s")
      code commentsForPost(post, comments);

    div(id="filter-result-three" class="example")

    hr

    h4(id="find") find

    p Loops through an array and returns the first item that returns true on the condition.

    div(class="code")
      code const findUsers = [
      code(class="i") { name: 'bob' },
      code(class="i") { name: 'kal' },
      code(class="i") { name: 'hal' },
      code(class="i") { name: 'jim' },
      code(class="i") { name: 'mel' }
      code ]
      code(class="s")
      code let findMatch = findUsers.find(function(user) {
      code(class="i") return user.name === "kal"
      code });

    div(id="find-result-one" class="example")
    
    div(class="code")
      code const findPosts = [
      code(class="i") { id: 1, title: 'My Post' },
      code(class="i") { id: 2, title: 'New Items' },
      code(class="i") { id: 3, title: 'Old Stuff' }
      code ]
      code(class="s") 
      code const findComment = { postId: 2, content: 'Nice post' };
      code(class="s") 
      code function postForComment(posts, comment) {
      code(class="i") return posts.find(function(post) {
      code(class="i2") return post.id === comment.postId;
      code(class="i") })
      code }
    
    div(id="find-result-two" class="example")

    hr

    h4(id="every") every

    p Returns a boolean true or false if every iteration meets a condition.

    div(class="code")
      code const computers = [
      code(class="i") { name: "Apple", ram: 24 },
      code(class="i") { name: "Compaq", ram: 4 },
      code(class="i") { name: "Dell", ram: 32 },
      code(class="i") { name: "Acer", ram: 16 }
      code ]
      code(class="s")
      code computers.every(function(computer) {
      code(class="i") return computer.ram > 16;
      code });
      
    div(id="every-result-one" class="example")

    hr

    h4(id="some") some

    p Returns a boolean true or false if some of the iterations meets a condition.

    div(class="code")
      code const computers2 = [
      code(class="i") { name: "Apple", ram: 24 },
      code(class="i") { name: "Compaq", ram: 4 },
      code(class="i") { name: "Dell", ram: 32 },
      code(class="i") { name: "Acer", ram: 16 }
      code ]
      code(class="s") 
      code computers2.some(function(computer) {
      code(class="i") return computer.ram > 16;
      code });


    div(id="some-result-one" class="example")

    hr

    h4(id="reduce") reduce

    p Condense all values in an array to one output value - starting from an initial value.

    div(class="code")
      code const values = [2, 4, 9, 15];
      code let sum = 0;
      code(class="s") 
      code let valuesResult = values.reduce(function(sum, number) {
      code(class="i") return sum + number;
      code }, 0);

    div(id="reduce-result-one" class="example")

    div(class="code")
      code const primaryColors = [
      code(class="i") { color: "red" },
      code(class="i") { color: "yellow" },
      code(class="i") { color: "blue" }
      code ]
      code(class="s")
      code let colorArr = primaryColors.reduce(function(previous, primaryColor) {
      code(class="i") previous.push(primaryColor.color);
      code(class="i") return previous;
      code }, []);

    div(id="reduce-result-two" class="example")